{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","onClick","toggleMode","htmlFor","Textform","useState","text","setText","style","color","heading","value","onChange","event","target","rows","backgroundColor","newText","showAlert","navigator","clipboard","writeText","vibrate","split","length","App","setMode","setAlert","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ae66dae7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower[0].toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`}role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n            \r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" to=\"/about\">About</Link>\r\n            </li>  */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode==='light' ? 'dark' : 'light'}`}>\r\n          <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const handleUpClick = ()=>{\r\n        // setText('You have clicked on UpClick');\r\n\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase! \",\"success\");\r\n    }\r\n    const handleLowClick = ()=>{\r\n        // setText('You have clicked on LowClick');\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase! \",\"success\");\r\n    }\r\n    const handleCopyClick = ()=>{\r\n        navigator.clipboard.writeText(text);\r\n        navigator.vibrate(200);\r\n        props.showAlert(\"Text Copied to Clipboard \",\"success\");\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n    const [text,setText] = useState(\"\");\r\n    return (\r\n        <>\r\n            <div className=\"container\" style = {{color : props.mode==='dark' ? 'white' : 'black'\r\n                }}>\r\n                <h3>{props.heading}</h3>\r\n                <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\" style = {{backgroundColor : props.mode==='dark' ? 'grey' : 'white',\r\n                color : props.mode==='dark' ? 'white' : 'black'\r\n                } } ></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleLowClick} >Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleCopyClick}>Copy text to clipboard</button>\r\n            </div>\r\n            <div className=\"container my-3\" style = {{color : props.mode==='dark' ? 'white' : 'black'\r\n                }}>\r\n                <h3>Your text summary</h3>\r\n                <p>{text.split(\" \").length} words, {text.length} characters</p>\r\n                <p>{1/125*text.split(\" \").length} minutes read</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length===0 ? 'Enter something' : text}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode , setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (msg,type)=>{\n    setAlert({\n      msg : msg,\n      type : type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  }\n  const toggleMode = ()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode is enabled \",\"success\")\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode is enabled \",\"success\");\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title = \"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      \n        {/* <Switch>\n            <Route path=\"/about\">\n              <About/>\n            </Route>\n            <Route path=\"/\"> */}\n              <Textform heading=\"Enter the text to analyze\" mode={mode}  showAlert={showAlert} />\n            {/* </Route> */}\n        {/* </Switch> */}\n        </div>\n      {/* </Router> */}\n    </> \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}